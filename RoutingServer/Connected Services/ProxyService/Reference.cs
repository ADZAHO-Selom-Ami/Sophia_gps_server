//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoutingServer.ProxyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeocodeResponse", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class GeocodeResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoutingServer.ProxyService.Address AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoutingServer.ProxyService.Address Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HouseNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TownField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HouseNumber {
            get {
                return this.HouseNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.HouseNumberField, value) != true)) {
                    this.HouseNumberField = value;
                    this.RaisePropertyChanged("HouseNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Road {
            get {
                return this.RoadField;
            }
            set {
                if ((object.ReferenceEquals(this.RoadField, value) != true)) {
                    this.RoadField = value;
                    this.RaisePropertyChanged("Road");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Town {
            get {
                return this.TownField;
            }
            set {
                if ((object.ReferenceEquals(this.TownField, value) != true)) {
                    this.TownField = value;
                    this.RaisePropertyChanged("Town");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LngField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lng {
            get {
                return this.LngField;
            }
            set {
                if ((this.LngField.Equals(value) != true)) {
                    this.LngField = value;
                    this.RaisePropertyChanged("Lng");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvailableBikeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvailableStandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoutingServer.ProxyService.Position PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvailableBike {
            get {
                return this.AvailableBikeField;
            }
            set {
                if ((this.AvailableBikeField.Equals(value) != true)) {
                    this.AvailableBikeField = value;
                    this.RaisePropertyChanged("AvailableBike");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvailableStand {
            get {
                return this.AvailableStandField;
            }
            set {
                if ((this.AvailableStandField.Equals(value) != true)) {
                    this.AvailableStandField = value;
                    this.RaisePropertyChanged("AvailableStand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoutingServer.ProxyService.Position Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contract", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Contract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] CitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Cities {
            get {
                return this.CitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CitiesField, value) != true)) {
                    this.CitiesField = value;
                    this.RaisePropertyChanged("Cities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TravelMode", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    public enum TravelMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Walking = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Biking = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Itinerary", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Itinerary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoutingServer.ProxyService.Position[] CoordinatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoutingServer.ProxyService.Step[] StepsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoutingServer.ProxyService.Position[] Coordinates {
            get {
                return this.CoordinatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesField, value) != true)) {
                    this.CoordinatesField = value;
                    this.RaisePropertyChanged("Coordinates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoutingServer.ProxyService.Step[] Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((object.ReferenceEquals(this.StepsField, value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Step", Namespace="http://schemas.datacontract.org/2004/07/Proxy")]
    [System.SerializableAttribute()]
    public partial class Step : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Instruction {
            get {
                return this.InstructionField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructionField, value) != true)) {
                    this.InstructionField = value;
                    this.RaisePropertyChanged("Instruction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyService.IProxy")]
    public interface IProxy {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetCoordinates", ReplyAction="http://tempuri.org/IProxy/GetCoordinatesResponse")]
        RoutingServer.ProxyService.GeocodeResponse GetCoordinates(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetCoordinates", ReplyAction="http://tempuri.org/IProxy/GetCoordinatesResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.GeocodeResponse> GetCoordinatesAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/CalculateDistance", ReplyAction="http://tempuri.org/IProxy/CalculateDistanceResponse")]
        double CalculateDistance(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/CalculateDistance", ReplyAction="http://tempuri.org/IProxy/CalculateDistanceResponse")]
        System.Threading.Tasks.Task<double> CalculateDistanceAsync(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/FindClosestStation", ReplyAction="http://tempuri.org/IProxy/FindClosestStationResponse")]
        RoutingServer.ProxyService.Station FindClosestStation(RoutingServer.ProxyService.Position chosenStation, RoutingServer.ProxyService.Station[] stations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/FindClosestStation", ReplyAction="http://tempuri.org/IProxy/FindClosestStationResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Station> FindClosestStationAsync(RoutingServer.ProxyService.Position chosenStation, RoutingServer.ProxyService.Station[] stations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetContractByCity", ReplyAction="http://tempuri.org/IProxy/GetContractByCityResponse")]
        RoutingServer.ProxyService.Contract GetContractByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetContractByCity", ReplyAction="http://tempuri.org/IProxy/GetContractByCityResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Contract> GetContractByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetContracts", ReplyAction="http://tempuri.org/IProxy/GetContractsResponse")]
        RoutingServer.ProxyService.Contract[] GetContracts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetContracts", ReplyAction="http://tempuri.org/IProxy/GetContractsResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Contract[]> GetContractsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetStations", ReplyAction="http://tempuri.org/IProxy/GetStationsResponse")]
        RoutingServer.ProxyService.Station[] GetStations(string contractName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetStations", ReplyAction="http://tempuri.org/IProxy/GetStationsResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Station[]> GetStationsAsync(string contractName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetItinerary", ReplyAction="http://tempuri.org/IProxy/GetItineraryResponse")]
        RoutingServer.ProxyService.Itinerary GetItinerary(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination, RoutingServer.ProxyService.TravelMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetItinerary", ReplyAction="http://tempuri.org/IProxy/GetItineraryResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Itinerary> GetItineraryAsync(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination, RoutingServer.ProxyService.TravelMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetFullItineraryInCaseOfBike", ReplyAction="http://tempuri.org/IProxy/GetFullItineraryInCaseOfBikeResponse")]
        RoutingServer.ProxyService.Itinerary[] GetFullItineraryInCaseOfBike(string origin, string destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetFullItineraryInCaseOfBike", ReplyAction="http://tempuri.org/IProxy/GetFullItineraryInCaseOfBikeResponse")]
        System.Threading.Tasks.Task<RoutingServer.ProxyService.Itinerary[]> GetFullItineraryInCaseOfBikeAsync(string origin, string destination);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProxyChannel : RoutingServer.ProxyService.IProxy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyClient : System.ServiceModel.ClientBase<RoutingServer.ProxyService.IProxy>, RoutingServer.ProxyService.IProxy {
        
        public ProxyClient() {
        }
        
        public ProxyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProxyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RoutingServer.ProxyService.GeocodeResponse GetCoordinates(string city) {
            return base.Channel.GetCoordinates(city);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.GeocodeResponse> GetCoordinatesAsync(string city) {
            return base.Channel.GetCoordinatesAsync(city);
        }
        
        public double CalculateDistance(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination) {
            return base.Channel.CalculateDistance(origin, destination);
        }
        
        public System.Threading.Tasks.Task<double> CalculateDistanceAsync(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination) {
            return base.Channel.CalculateDistanceAsync(origin, destination);
        }
        
        public RoutingServer.ProxyService.Station FindClosestStation(RoutingServer.ProxyService.Position chosenStation, RoutingServer.ProxyService.Station[] stations) {
            return base.Channel.FindClosestStation(chosenStation, stations);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Station> FindClosestStationAsync(RoutingServer.ProxyService.Position chosenStation, RoutingServer.ProxyService.Station[] stations) {
            return base.Channel.FindClosestStationAsync(chosenStation, stations);
        }
        
        public RoutingServer.ProxyService.Contract GetContractByCity(string city) {
            return base.Channel.GetContractByCity(city);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Contract> GetContractByCityAsync(string city) {
            return base.Channel.GetContractByCityAsync(city);
        }
        
        public RoutingServer.ProxyService.Contract[] GetContracts() {
            return base.Channel.GetContracts();
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Contract[]> GetContractsAsync() {
            return base.Channel.GetContractsAsync();
        }
        
        public RoutingServer.ProxyService.Station[] GetStations(string contractName) {
            return base.Channel.GetStations(contractName);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Station[]> GetStationsAsync(string contractName) {
            return base.Channel.GetStationsAsync(contractName);
        }
        
        public RoutingServer.ProxyService.Itinerary GetItinerary(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination, RoutingServer.ProxyService.TravelMode mode) {
            return base.Channel.GetItinerary(origin, destination, mode);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Itinerary> GetItineraryAsync(RoutingServer.ProxyService.Position origin, RoutingServer.ProxyService.Position destination, RoutingServer.ProxyService.TravelMode mode) {
            return base.Channel.GetItineraryAsync(origin, destination, mode);
        }
        
        public RoutingServer.ProxyService.Itinerary[] GetFullItineraryInCaseOfBike(string origin, string destination) {
            return base.Channel.GetFullItineraryInCaseOfBike(origin, destination);
        }
        
        public System.Threading.Tasks.Task<RoutingServer.ProxyService.Itinerary[]> GetFullItineraryInCaseOfBikeAsync(string origin, string destination) {
            return base.Channel.GetFullItineraryInCaseOfBikeAsync(origin, destination);
        }
    }
}
